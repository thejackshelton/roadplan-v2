import{component$,sync$,useOnWindow}from'@qwik.dev/core';export const ModulePreload=component$(()=>{useOnWindow('load',sync$(async()=>{window.requestIdleCallback||(window.requestIdleCallback=(t,e)=>{let n=e||{},r=n.timeout||1,a=performance.now();return setTimeout(()=>{t({get didTimeout(){return!n.timeout&&performance.now()-a-1>r},timeRemaining:()=>Math.max(0,1+(performance.now()-a))})},1)});let t=async()=>{let t=document.querySelector('script[type="qwik/state"]'),e=document.querySelector('script[q\\:type="prefetch-bundles"]'),n=await(t?.textContent?JSON.parse(t.textContent):{}),r=new Set;JSON.stringify(n).replace(/q-[^"]+?\.js/g,t=>(r.add(t),t));e?.textContent?.match(/\["prefetch","\/build\/","(.*?)"\]/)?.[1]?.split('","').forEach(t=>{t.startsWith("q-")&&r.add(t)});const a=async t=>{try{const e=await(await fetch(`/build/${t}`)).text(),n=e.match(/import.*?"\.\/([^"]+)"/g)||[];for(const t of n){const e=t.match(/\.\/([^"]+)/);e?.[1]&&r.add(e[1])}}catch(e){console.warn('Failed to preload:',t)}};for(const t of r){await a(t)}r.forEach(t=>{let e=document.createElement("link");e.rel="modulepreload",e.as="script",e.href="/build/"+t,document.head.appendChild(e)})};await requestIdleCallback(t)}));return<></>});